import { TimelineManager } from './services/timeline-manager.js';

const DAY_NAMES = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
const DAY_SHORT_NAMES = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
const DAY_IDS = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

let currentWeek = {
  startDate: getMonday(new Date()),
  days: []
};

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TimelineManager
const timelineManager = new TimelineManager();

let showAllHours = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Å–æ–≤

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initCurrentWeek() {
    updateWeekData();
    await generateSchedule();
    updateWeekDisplay();
    timelineManager.init(currentWeek);

    // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–°–í–ï–¢–ö–£ –¢–ï–ö–£–©–ï–ì–û –î–ù–Ø
    highlightCurrentDay();

    return currentWeek;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
function updateWeekData() {
    currentWeek.days = [];

    for (let i = 0; i < 7; i++) {
        const date = new Date(currentWeek.startDate);
        date.setDate(currentWeek.startDate.getDate() + i);

        const dateStr = date.toISOString().split('T')[0];

        currentWeek.days.push({
            date: dateStr,
            day: DAY_IDS[i],
            dayName: DAY_NAMES[i],
            shortName: DAY_SHORT_NAMES[i],
            dayOfMonth: date.getDate()
        });
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function generateSchedule() {
    const container = document.getElementById('schedule-container');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º overlay –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    const overlay = document.getElementById('events-overlay');

    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –Ω–µ overlay
    const daysContainer = container.querySelector('.days-container');
    if (daysContainer) {
        daysContainer.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π days-container
    const newDaysContainer = document.createElement('div');
    newDaysContainer.className = 'days-container';

    // –ö–æ–ª–æ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    newDaysContainer.appendChild(createTimeColumn());

    // –ö–æ–ª–æ–Ω–∫–∏ –¥–Ω–µ–π
    currentWeek.days.forEach(day => {
        newDaysContainer.appendChild(createDayColumn(day));
    });

    container.appendChild(newDaysContainer);

    return Promise.resolve();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
function createTimeColumn() {
    const timeColumn = document.createElement('div');
    timeColumn.className = 'time-column';

    timeColumn.appendChild(createElement('div', 'time-header', ''));

    for (let hour = 0; hour < 24; hour++) {
    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const timeCell = createElement('div', 'time-cell', `${hour}:00`);

        if (!shouldShowHour(hour)) {
            timeCell.style.display = 'none';
        }
        timeColumn.appendChild(timeCell);
    }

    return timeColumn;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–Ω—è
function createDayColumn(day) {
    const dayColumn = document.createElement('div');
    dayColumn.className = 'day-column';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
    const header = createElement('div', 'day-header', `${day.dayOfMonth}, ${day.shortName}`);
    header.title = `${day.dayName} ${day.date}`;

    // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨
    if (day.date === getCurrentDateString()) {
        header.classList.add('current-day');
    }

    dayColumn.appendChild(header);

    // –Ø—á–µ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    for (let hour = 0; hour < 24; hour++) {
        const cell = createElement('div', 'schedule-cell', '');
        cell.setAttribute('data-day', day.day);
        cell.setAttribute('data-time', `${hour.toString().padStart(2, '0')}:00`);
        cell.setAttribute('data-date', day.date);
        cell.title = `${formatDate(day.date)}\n${hour}:00`;
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–æ—á–Ω—ã–µ —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!shouldShowHour(hour)) {
            cell.style.display = 'none';
        }

        dayColumn.appendChild(cell);
    }

    return dayColumn;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
function createElement(tag, className, textContent) {
    const element = document.createElement(tag);
    element.className = className;
    element.textContent = textContent;
    return element;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateStr) {
    const [year, month, day] = dateStr.split('-');
    return `${day}.${month}.${year}`;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Å–æ–≤
function toggleHoursVisibility() {
    showAllHours = !showAllHours;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —è—á–µ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏
    document.querySelectorAll('.time-cell').forEach(cell => {
        const hour = parseInt(cell.textContent.split(':')[0]);
        cell.style.display = shouldShowHour(hour) ? 'block' : 'none';
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —è—á–µ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    document.querySelectorAll('.schedule-cell').forEach(cell => {
        const hour = parseInt(cell.getAttribute('data-time'));
        cell.style.display = shouldShowHour(hour) ? 'block' : 'none';
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    timelineManager.update();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    updateToggleButtonText();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∞—Å
function shouldShowHour(hour) {
    return showAllHours || (hour >= 7 && hour <= 20);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
function updateToggleButtonText() {
    const button = document.getElementById('toggle-hours-btn');
    if (button) {
        button.textContent = showAllHours ? '–°–∫—Ä—ã—Ç—å –Ω–æ—á–Ω—ã–µ —á–∞—Å—ã' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —á–∞—Å—ã';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ–¥–µ–ª–∏
function updateWeekDisplay() {
    const start = currentWeek.days[0].date;
    const end = currentWeek.days[6].date;

    const weekRangeElement = document.getElementById('current-week-range');
    if (weekRangeElement) {
        weekRangeElement.textContent = `${formatDate(start)}-${formatDate(end)}`;
    }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
async function changeWeek(daysOffset) {
    currentWeek.startDate.setDate(currentWeek.startDate.getDate() + daysOffset);
    updateWeekData();
    await generateSchedule();
    updateWeekDisplay();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—é –≤ TimelineManager
    timelineManager.setCurrentWeek(currentWeek);

    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ü–û–î–°–í–ï–¢–ö–£ –¢–ï–ö–£–©–ï–ì–û –î–ù–Ø
    highlightCurrentDay();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è EventManager
    return currentWeek;
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
function highlightCurrentDay() {
    const currentDate = getCurrentDateString();

    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    document.querySelectorAll('.day-header').forEach(header => {
        header.classList.remove('current-day');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é
    const currentDayHeader = document.querySelector(`[data-date="${currentDate}"]`)?.closest('.day-column')?.querySelector('.day-header');
    if (currentDayHeader) {
        currentDayHeader.classList.add('current-day');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
function getMonday(date) {
    const day = date.getDay();
    const diff = date.getDate() - day + (day === 0 ? -6 : 1);
    return new Date(date.setDate(diff));
}

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
function goToNextWeek() {
    changeWeek(7);
}

function goToPrevWeek() {
    changeWeek(-7);
}



// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
function getCurrentDateString() {
    return new Date().toISOString().split('T')[0];
}

export {
    initCurrentWeek,
    goToPrevWeek,
    goToNextWeek,
    currentWeek,
    toggleHoursVisibility,
    shouldShowHour,
    timelineManager
};



