import { shouldShowHour } from '../constants/time-config.js';

export class TimelineManager {
    constructor() {
        this.currentWeek = null;
        this.DAY_IDS = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
        this.updateInterval = null;
        this.isInitialized = false;

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        this.update = this.update.bind(this);
        this.handleResize = this.handleResize.bind(this);
        this.handleScroll = this.handleScroll.bind(this);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
     */
    init(currentWeek) {
        if (this.isInitialized) return;

        this.currentWeek = currentWeek;
        this.setupEventListeners();
        this.startAutoUpdate();
        this.isInitialized = true;

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.update();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
     */
    setCurrentWeek(currentWeek) {
        this.currentWeek = currentWeek;
        this.update();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π
     */
    update() {
        if (!this.currentWeek) return;

        const now = new Date();
        const currentDateStr = now.toISOString().split('T')[0];

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–Ω–∏–∏
        this.removeAllLines();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –Ω–µ–¥–µ–ª–µ
        const isCurrentWeek = this.currentWeek.days.some(day => day.date === currentDateStr);
        if (!isCurrentWeek) return;

        const currentDay = now.getDay();
        const currentHour = now.getHours();
        const currentMinutes = now.getMinutes();

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0) –≤ 6 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const adjustedCurrentDay = currentDay === 0 ? 6 : currentDay - 1;

        const scheduleContainer = document.querySelector('.schedule-container');
        if (!scheduleContainer) return;

        const timeColumn = document.querySelector('.time-column');
        const timeColumnWidth = timeColumn ? timeColumn.offsetWidth : 60;

        // 1. –°–û–ó–î–ê–ï–ú –õ–ò–ù–ò–Æ –ù–ê –í–°–Æ –ù–ï–î–ï–õ–Æ (—Ç–æ–Ω–∫–∞—è)
        const weekLine = this.createWeekLine(currentHour, currentMinutes, timeColumnWidth);
        if (weekLine) {
            document.querySelector('.schedule-wrapper').appendChild(weekLine);
        }

        // 2. –°–û–ó–î–ê–ï–ú –õ–ò–ù–ò–Æ –ù–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨ (—Ç–æ–ª—Å—Ç–∞—è)
        const dayLine = this.createDayLine(currentHour, currentMinutes, adjustedCurrentDay, timeColumnWidth);
        if (dayLine) {
            document.querySelector('.schedule-wrapper').appendChild(dayLine);
        }

        // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ª–∏–Ω–∏–π
        this.updateLinesVisibility(currentHour, currentMinutes);
    }


     /**
     * –°–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
     */
    createWeekLine(hour, minutes, timeColumnWidth) {
        // 1. –°–û–ó–î–ê–ï–ú –õ–ò–ù–ò–Æ –ù–ê –í–°–Æ –ù–ï–î–ï–õ–Æ (—Ç–æ–Ω–∫–∞—è)
        const position = this.calculateLinePosition(hour, minutes);
        if (position === 0) return null;

        const weekLine = document.createElement('div');
        weekLine.className = 'current-time-line current-time-week-line';
        weekLine.style.top = `${position}px`;
        weekLine.style.left = `${Math.round(timeColumnWidth)}px`;

        // üî• –í–´–†–ê–í–ù–ò–í–ê–ï–ú –®–ò–†–ò–ù–£
        const totalWidth = Math.round(this.calculateTotalWeekWidth());
        weekLine.style.width = `${totalWidth}px`;

        return weekLine;
    }

        /**
     * –°–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
     */
    createDayLine(hour, minutes, adjustedCurrentDay, timeColumnWidth) {
        // 2. –°–û–ó–î–ê–ï–ú –õ–ò–ù–ò–Æ –ù–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨ (—Ç–æ–ª—Å—Ç–∞—è)
        const todayCells = document.querySelectorAll(`[data-day="${this.DAY_IDS[adjustedCurrentDay]}"]`);
        if (todayCells.length === 0) return null;

        const currentHourCell = Array.from(todayCells).find(cell => {
            const cellHour = parseInt(cell.getAttribute('data-time'));
            return cellHour === hour;
        });

        if (!currentHourCell) return null;

        const position = this.calculateLinePosition(hour, minutes);
        if (position === 0) return null;

        const dayLine = document.createElement('div');
        dayLine.className = 'current-time-line current-time-day-line';

        // üî• –í–´–†–ê–í–ù–ò–í–ê–ï–ú –í–°–ï –ö –¶–ï–õ–´–ú –ü–ò–ö–°–ï–õ–Ø–ú
        const cellWidth = Math.round(currentHourCell.offsetWidth);
        const leftPosition = Math.round(timeColumnWidth + (adjustedCurrentDay * cellWidth));

        dayLine.style.top = `${position}px`;
        dayLine.style.left = `${leftPosition}px`;
        dayLine.style.width = `${cellWidth}px`;

        return dayLine;
    }


     /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –ª–∏–Ω–∏–π
     */
    updateLinesVisibility(hour, minutes) {
        const shouldShow = shouldShowHour(hour) ||
                          (hour === 20 && minutes > 0) ||
                          (hour === 6 && minutes < 59);

        document.querySelectorAll('.current-time-line').forEach(line => {
            line.style.display = shouldShow ? 'block' : 'none';
        });
    }

     /**
     * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∏–Ω–∏–∏
     */
    removeAllLines() {
        document.querySelectorAll('.current-time-line, .current-time-week-line').forEach(line => line.remove());
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–π —à–∏—Ä–∏–Ω—ã –Ω–µ–¥–µ–ª–∏
    calculateLinePosition(hour, minutes) {
        const scheduleContainer = document.querySelector('.schedule-container');
        if (!scheduleContainer) return 0;

        // –ù–∞—Ö–æ–¥–∏–º –ª—é–±—É—é —è—á–µ–π–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Å–∞
        const anyCell = document.querySelector(`.schedule-cell[data-time="${hour.toString().padStart(2, '0')}:00"]`);
        if (!anyCell) return 0;

        const cellRect = anyCell.getBoundingClientRect();
        const scheduleRect = scheduleContainer.getBoundingClientRect();

        const rawPosition = cellRect.top - scheduleRect.top + scheduleContainer.scrollTop +
               (minutes / 60) * anyCell.offsetHeight;

        // üî• –í–´–†–ê–í–ù–ò–í–ê–ï–ú –ö –¶–ï–õ–´–ú –ü–ò–ö–°–ï–õ–Ø–ú
        return Math.round(rawPosition);
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–Ω–∏–∏
    calculateTotalWeekWidth() {
        const daysContainer = document.querySelector('.days-container');
        if (!daysContainer) return 0;

        return daysContainer.offsetWidth;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    startAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.updateInterval = setInterval(this.update, 60000);
    }

            /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        window.addEventListener('resize', this.handleResize);
        window.addEventListener('scroll', this.handleScroll);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å debounce
     */
    handleResize() {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(() => this.update(), 150);
    }

    handleScroll() {
        clearTimeout(this.scrollTimer);
        this.scrollTimer = setTimeout(() => this.update(), 50);
    }

     /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }

        window.removeEventListener('resize', this.handleResize);
        window.removeEventListener('scroll', this.handleScroll);

        this.removeAllLines();
        this.isInitialized = false;
    }
}